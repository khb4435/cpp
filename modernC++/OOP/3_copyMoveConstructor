#include <iostream>
#include <string>
class Cat{
    public:
        void print(){
            std::cout<<mName<<" "<<mAge<<std::endl;
        }
    private:
        std::string mName;
        int mAge;
        char *mPtr;
}

//보통 생성자는 사용자가 직접만들고 소멸자, copy/move constructor, copy/move assignment는
//스스로 만들어 지는데
//멤버변수에 포인터 있을 경우 저 것들 전부 직접 정의해줘야한다.
//c++ reference rule of three or five

#include <iostream>
#include <string>
class Cat{
    public:
        void print(){
            std::cout<<mName<<" "<<mAge<<std::endl;
        }
        //1.생성자
        Cat() = default; 
        Cat(std::string name,int age):mName{std::move(name)},mAge{age}{
            std::cout<<"생성자"<<std::endl;
        }
        //2.소멸자
        ~Cat(){ //소멸자하는데 인자가 필요허냐?
            //delete mPtr;
            std::cout<<"소멸자"<<std::endl;
        }
        //3.copy constructor : 새로운 오브젝트를 만드는데, 기존 오브젝트를 전부 복사해서 만드는 것
        //l value 받는다.
        Cat(const Cat& other):mName{other.mName},mAge{other.mAge}{
            std::cout<<"복사 생성자"<<std::endl;
            //std::memcpy();
        }
        //4.move constructor : 기존 오브젝트에서 무브 시키는 것
        //r value 받는다.
        Cat(const Cat&& other):mName{std::move(other.mName)},mAge{other.mAge}{
            std::cout<<"move constructor"<<std::endl;
            //mPtr = other.mPtr;
            //other.mPtr = nullptr;
        }
    private:
        std::string mName;
        int mAge;
        //char *mPtr;
}

int main(){
    //1.생성자
    Cat kitty{"kitty",1};
    //3.복사생성자
    Cat kitty2{kitty}; 
    Cat kitty3 = kitty;
    //assignment같지만 새로운 object가 할당되는 과정이라 copy constructor

    //4.move constructor
    Cat kitty4{std::move(kitty)};

    return 0;
}
