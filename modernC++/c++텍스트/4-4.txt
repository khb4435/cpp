왜 도대체 초기화 리스트를 사용해야 되냐고 물을 수 있습니다. 왜냐하면
Marine::Marine() {
  hp = 50;
  coord_x = coord_y = 0;
  damage = 5;
  is_dead = false;
}
나
Marine::Marine() : hp(50), coord_x(0), coord_y(0), damage(5), is_dead(false) {}
는 하는 일이 똑같아 보이기 때문이죠. 하지만 실제로 약간의 차이가 있습니다. 
왜냐하면, 초기화 리스트를 사용한 버전의 경우 생성과 초기화를 동시에 하게 됩니다.
반면에 초기화 리스트를 사용하지 않는다면 생성을 먼저 하고 그 다음에 대입 을 수행하게 됩니다. 쉽게 말하면 초기화 리스트를 사용하는 것은
int a = 10;
이라 하는 것과 같고, 그냥 예전 버전의 생성자를 사용하는 것은
int a;
a = 10;
이라 하는 것과 동일하다는 것입니다. 만약에 int 가 대신에 클래스 였다면, 
전자의 경우 복사 생성자 가 호출되는데, 후자의 경우 디폴트 생성자가 호출된 뒤 대입이 수행된다는 이야기 이겠지요.
앞서 배운 바에 따르면 상수와 레퍼런스들은 모두 생성과 동시에 초기화가 되어야 합니다.
따라서 만약에 클래스 내부에 레퍼런스 변수나 상수를 넣고 싶다면 이들을 생성자에서 무조건 초기화 리스트를 사용해서 초기화 시켜주어야만 합니다.

static int total_marine_num;
먼저 위와 같이 클래스 static 변수를 정의하였습니다. 
모든 전역 및 static 변수들은 정의와 동시에 값이 자동으로 0 으로 초기화 되기 때문에 이 경우 우리가 굳이 따로 초기화 하지 않아도 되지만 
클래스 static 변수들의 경우 아래와 같은 방법으로 초기화 합니다.
int Marine::total_marine_num = 0;
(객체에 엮여있는 멤버함수 이용 초기화하는것이 아님)

놀랍게도 클래스 안에는 static 함수도 정의할 수 있는데, static 변수가 어떠한 객체에 종속되는 것이 아니라, 
그냥 클래스 자체에 딱 1 개 존재하는 것인 것 처럼, static 함수 역시 어떤 특정 객체에 종속되는 것이 아니라 
클래스 전체에 딱 1 개 존재하는 함수입니다.
즉, static 이 아닌 멤버 함수들의 경우 객체를 만들어야지만 각 멤버 함수들을 호출할 수 있지만 
static 함수의 경우, 객체가 없어도 그냥 클래스 자체에서 호출할 수 있게 됩니다.
Marine::show_total_marine();와 같이 (클래스)::(static 함수) 형식으로 호출하게 됩니다. 
왜냐하면 어떠한 객체도 이 함수를 소유하고 있지 않기 때문이죠. 
그러하기에, static 함수 내에서는 클래스의 static 변수 만을 이용할 수 밖에 없습니다. 
만일 static 함수 내에서 아래처럼 그냥 클래스의 멤버 변수들을 이용한다면
default_damage 가 누구의 default_damage 인지 아무도 모르는 상황이 발생합니다. 
즉, 어떤 객체의 default_damage 인지 static 변수인 show_total_marine() 은 알 수 없겟죠. 
왜냐하면 앞에서 계속 말해왔듯이 어떤 객체에도 속해이지 않기 때문이니까요!


**레퍼런스 리턴 
Marine& Marine::be_attacked(int damage_earn) {
  this->hp -= damage_earn;
  if (this->hp <= 0) this->is_dead = true;
  return *this; --> 자기자신 업데이트!
}
위 경우 be_attacked 함수는 Marine& 타입을 리턴하게 되는데, 위 경우, *this 를 리턴하게 됩니다. 
앞에서도 말했지만 this 가 지금 이 함수를 호출한 객체를 가리키는 것은 기억 하시죠? 
그렇기 때문에 *this 는 그 객체 자신을 의미하게 됩니다. 따라서,
marine2.be_attacked(marine1.attack()).be_attacked(marine1.attack());
문장의 경우, 먼저 marine2.be_attacked(marine1.attack()) 이 먼저 실행되고 리턴되는 것이 다시 marine2 이므로 
그 다음에 또 한 번marine2.be_attacked(marine1.attack()) 가 실행된다고 생각할 수 있습니다.
간단하죠? 만일, be_attacked 함수의 리턴 타입이 Marine& 이 아니라 그냥 Marine 이라고 해봅시다. 
즉, 만일 be_attacked 함수가 아래와 같이 바뀌었다고 가정한다면

Marine Marine::be_attacked(int damage_earn) {
  this->hp -= damage_earn;
  if (this->hp <= 0) this->is_dead = true;
  return *this;
}
marine2.be_attacked(marine1.attack()).be_attacked(marine1.attack());
를 실행해보면 marine2 는 실제로 두 번 공격이 아닌 1 번 공격으로 감소한 HP 만을 보입니다. 
(즉 40 이 아닌 45 로 나옴) 이는 앞에서도 설명했듯이 리턴타입이 Marine 이므로, 
임시 객체 Marine 을 생성해서, *this 의 내용으로 복사가 되고 (즉, Marine 의 복사 생성자 호출) 
이 임시 객체에 대한 be_attacked 함수가 호출되게 되는 것입니다.
따라서 결국 두 번째 be_attacked 는 marine2 가 아닌 엉뚱한 임시 객체에 대해 호출되는 것이므로 결국 marine2 는 marine1 의 공격을 1 번만 받게 됩니다.
