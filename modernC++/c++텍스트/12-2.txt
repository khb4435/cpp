**std::move 함수는 이동을 수행하지 않는다. 그냥 인자로 받은 객체를 우측값으로 변환할 뿐이다.

복사생성자의 인자(const A& a)이라 수정하지 못하고 복사만 구현이 되었음.
이동생성자, 이동대입연산자 등의 인자 (A&& a)로 이동의 구현을 시켰음.
그런데 좌측값도 이동을 시키고 싶으면 어떨까?
template <typename T>
void my_swap(T &a, T &b) { //l value in
  T tmp(a); //복사생성자
  a = b; //복사대입연산자
  b = tmp; //복사대입연산자 
}//복사를 쓸데없이 3번
-----------------------------------------------------------------------------------
std::move -> 좌측값을 우측값으로 바꿔준다.
-----------------------------------------------------------------------------------
A() { std::cout << "일반 생성자 호출!" << std::endl; }
A(const A& a) { std::cout << "복사 생성자 호출!" << std::endl; }
A(A&& a) { std::cout << "이동 생성자 호출!" << std::endl; }

A a; //일반생성자 호출!
std::cout << "---------" << std::endl;
A b(a); //복사생성자 호출!!
A c(std::move(a)); //이동생성자 호출!!
--------------------------------------------------------------------------------------
Mystring str3 = str1 + str2의 이동 생성자

MyString& MyString::operator=(MyString&& s) {
  std::cout << "이동!" << std::endl;
  string_content = s.string_content;
  memory_capacity = s.memory_capacity;
  string_length = s.string_length;

  s.string_content = nullptr;
  s.memory_capacity = 0;
  s.string_length = 0;
  return *this;
}
-------------------------------------------------------------완벽한전달
template <typename T>
void my_swap(T &a, T &b) {
  T tmp(std::move(a));
  a = std::move(b);
  b = std::move(tmp);
}
만일 여러분이 MyString& MyString::operator=(MyString&& s)를 정의하지 않았더라면 일반적인 대입 연산자가 
오버로딩 되서 매우 느린 복사가 수행됩니다.
-------------------------------------------------------------------------------------------
보편적레퍼런스
template <typename T>
void wrapper(T&& u) { //일반적으론 u가 우측값레퍼런스지만 templete과 쓰이면 보편적레퍼런스로, l or R value 다 받는다.
  g(std::forward<T>(u)); //u가 우측값이 넘어왔을 때만 std::move수행한다.
}
//u가 우측값을 받아도 함수내의 u는 좌측값이라서 우측값 본연으로 실행하려면 std::move가 필요함
//만일 좌측값 레퍼런스일 때 move 를 해버린다면 좌측값에 오버로딩 되는 g 가 아닌 우측값에 오버로딩 되는 
g 가 호출되겠지요.
