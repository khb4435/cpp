C 언어 스타일의 문자열은 여러가지 문제점들이 많기 때문에 (예를 들어 문자열의 길이를 한 번에 알 수 없고 마지막 NULL 문자까지 하나 하나 읽어야 된다는 든지..) 문자열을 처리할 수 있는 새로운 무언가가 계속 필요해야 했습니다. 하지만 많은 프로그래머들의 노력 끝에 string 이라는 빠르고, 안전하고 사용하기 매우 간단한 문자열 클래스가 표준으로 채택이 됩니다.

(이 string 에 들어가 있는 몇 가지 기술을 소개해보자면, 짧은 문자열에 대해서는 동적으로 메모리를 할당하지 않고 그냥 지역 변수로 보관을 하고, 문자열을 복사를 할 때 그 복사된 문자열의 내용이 바뀌지 않는 한 실제로 데이터를 복사하는 것이 아니라 원래 문자열을 가리키기만 한다 등등 속도를 향상시키기 위한 여러 노력이 접목되어 있습니다)
물론 이는 std::string 구현 방식에 따라 다릅니다. 여러분이 어떤 라이브러리를 사용함에 따라 아닐 수도 있습니다.}

#include <iostream>
#include <string>

int main() {
  // 표준이므로 std 안에string 이 정의되어 있습니다.
  std::string s = "abc"; //즉, 위 문장은 string 클래스의 인자를 const char * 로 받는 생성자를 호출한 것으로 볼 수 있겠지요.

   std::cout << s <<  std::endl; //와 같이 abc 가 잘 출력됨을 알 수 있습니다.

  return 0;
}

——————————————————————
#include <iostream>
#include <string>

int main() {
  std::string s = "abc";
  std::string t = "def";
  std::string s2 = s;

   std::cout << s << " 의 길이 : " << s.length() <<  std::endl;
   std::cout << s << " 뒤에 " << t << " 를 붙이면 : " << s + t <<  std::endl;

  if (s == s2) {
     std::cout << s << " 와 " << s2 << " 는 같다 " <<  std::endl;
  }
  if (s != t) {
     std::cout << s << " 와 " << t << " 는 다르다 " <<  std::endl;
  }
  return 0;
}

위에는 몇 가지 string 클래스의 기능들을 간단히 보여드린 것입니다. 예를 들어 문자열의 길이를 출력하는 length 함수라던지, 연산자 오버로딩을 사용해서 + 연산자가 실제로 문자열을 결합시키는 함수로 사용되고 있습니다.
특히 편리한 점으로 C 형식 문자열이였을 경우 문자열을 비교하기 위해서 strcmp 함수를 사용했어야 하고,와 같이 == 나 != 로 비교하는 것이 불가능 하였습니다. (왜냐하면 이는 문자열의 주소값을 비교하는 것이였으니까요! 하지만 이 string 클래스는 == 와 != 연산자들을 모두 오버로딩해서 제대로 비교를 수행합니다. 뿐만 아니라 크기 비교 >=, <= 등도 제대로 수행이 되지요.
표준 문자열 std::string 에는 length 함수 말고도, 문자열 사이에 문자열을 삽입하는 insert 함수나, 특정 위치를 지우는 erase 나 문자열을 치환하는 replace 등등 수 많은 유용한 함수들이 많습니다.

——————————————————————

자 이제 각각의 Employee 클래스를 만들었으니, 이 Employee 객체들을 관리할 수 있는 무언가가 있어야 겠지요? 물론 단순히 배열을 사용해서 사원들을 관리할 수 있겠지만, 그렇게 된다면 굉장히 불편하겠지요? 그래서 저는 EmployeeList 클래스를 만들어서 간단하게 처리하도록 할 것입니다.
일단 우리는 다음과 같은 멤버 변수들을 이용해서 사원 데이터를 처리할 것입니다.

int alloc_employee;        // 할당한 총 직원 수
int current_employee;      // 현재 직원 수
Employee **employee_list;  // 직원 데이터

EmployeeList(int alloc_employee) : alloc_employee(alloc_employee) {
  employee_list = new Employee*[alloc_employee];
  current_employee = 0;
}

——————————————————————

<상속>
class Derived : public Base {
  std::string s;

 public:
  Derived() : Base(), s("파생") { //Derived 의 생성자는 위 처럼 초기화자 리스트에서 기반의 생성자를 호출해서 기반의 생성을 먼저 처리 한 다음에, Derived 의 생성자가 실행되어야 합니다. 참고로 기반 클래스의 생성자를 명시적으로 호출하지 않을 경우 기반 클래스의 디폴트 생성자가 호출됩니다.
     std::cout << "파생 클래스" <<  std::endl;

    // Base 에서 what() 을 물려 받았으므로
    // Derived 에서 당연히 호출 가능하다
    what();
  }
};

Base클래스의 멤버변수로 string s가 있었고 , 멤버함수로 Base() (생성자) , What()이 있었다면
Base를 public상속받은 Derived클래스에는 그대로 string s, Base(), What()과 또 string s, Derived()가 있음
그런데, what 함수를 호출했을 때, 파생 이 아니라 기반 라고 출력이 되었는데, what 함수를 보면 s 의 값을 출력하도록 되어 있습니다. 이러한 일이 발생한 이유는, what 함수는 Base 에 정의가 되어 있기 때문에 Derived 의 s 가 아니라 Base 의 s 가 출력되어 "기반" 라고 나오게 되는 것입니다.
그렇다면 만일 Derived 에도 what 함수를 정의해주면 어떨까요.
다른 클래스에 정의되어 있는 것이기 때문에 다른 함수로 취급됩니다. (물론, Derived 안에 what 에 두 개 정의되어 있다면 문제가 되었겠지요)
위 경우에는 Derived 에 what 함수가 정의되어 있기 때문에 Derived 의 생성자에서 what 을 호출 할 때 (굳이) 멀리 Base 의 함수들 까지 뒤지지 않고, 바로 앞에 있는 Derived 의 what 함수를 호출하게 됩니다.
이런 것을 가리켜 오버라이딩(overriding)이라고 합니다. 즉, Derived 의 what 함수가 Base 의 what 함수를 오버라이딩 한 것이지요.
간혹 함수의 오버로딩(overloading) 과 혼동하시는 분들이 많은데, 오버로딩은 같은 이름의 함수를 인자를 달리 하여 정의하는 것을 의미하는 것입니다. 상속에서의 오버라이딩과는 전혀 다른 이야기 입니다

——————————————————————

* public 형태로 상속 하였다면 기반 클래스의 접근 지시자들에 영향 없이 그대로 작동합니다. 즉 파생 클래스 입장에서 public 은 그대로 public 이고, protected 는 그대로 protected 이고, private 은 그대로 private 입니다.
* 만일 protected 로 상속하였다면 파생 클래스 입장에서 public 은 protected 로 바뀌고 나머지는 그대로 유지됩니다.
* 만일 private 으로 상속하였다면 파생 클래스 입장에서 모든 접근 지시자들이 private 가 됩니다.

#include <iostream>
#include <string>

class Base {
 public:
  std::string parent_string;

  Base() : parent_string("기반") { std::cout << "기반 클래스" << std::endl; }

  void what() { std::cout << parent_string << std::endl; }
};

class Derived : private Base {
  std::string child_string;

 public:
  Derived() : child_string("파생"), Base() {
    std::cout << "파생 클래스" << std::endl;
  }

  void what() { std::cout << child_string << std::endl; }
};

int main() {
  Base p;
  // Base 에서는 parent_string 이 public 이므로
  // 외부에서 당연히 접근 가능하다.
  std::cout << p.parent_string << std::endl;

  Derived c;
  // 반면에 Derived 에서는 parent_string 이
  // (private 상속을 받았기 때문에) private 이
  // 되어서 외부에서 접근이 불가능하다.
  std::cout << c.parent_string << std::endl;

  return 0;
}
 
