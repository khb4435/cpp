friend 키워드
class A {
 private:
  int x;

  friend class B; // B야 넌 나의 친구야 내 모든걸 줄게
};

class B {
 private:
  int y;
};
이제 B는 A의 private에 접근가능
쉽게 말해 위 경우 B 에는 A 가 friend 라고 지정하지 않았으므로, A 는 B 의 private 변수인 int y 에 접근할 수 없게 됩니다. 
----------------------------------------------------------------------------
사실 컴파일러는 이항 연산자 (피연산자를 두 개를 취하는 연산자들; 예를 들어서 +, -, *, /, ->, = 등) 를 다음과 같은 
두 개의 방식으로 해석합니다.
어떤 임의의 연산자 @ 에 대해서, a@b 는
a.operator@(b);
operator@(a, b);
컴파일러는 둘 중 가능한 녀석을 택해서 처리됩니다. 
a.operator@(b) 에서의 operator@ 는 a 의 클래스의 멤버 함수로써 사용되는 것이고, 
operator@(a,b) 에서의 operator@ 는 클래스 외부에 정의되어 있는 일반적인 함수를 의미하게 됩니다.
----------------------------------------------------------------------------
Complex operator+(const Complex& a, const Complex& b) {
  // ...
}
우리의 또 다른 operator+ 는 두 개의 const Complex& 타입의 인자 a,b 를 받게 됩니다. 
앞에서도 말했지만 컴파일러는 정확히 일치 하지 않는 경우, 가장 가까운 가능한 오버로딩 되는 함수를 찾게 되는데, 
마침 우리에게는 Complex(const char *) 타입의 생성자가 있으므로,
"-1.1 + i3.923" + a;는 
operator+(Complex("-1.1 + i3.923"), a);가 되어서 잘 실행되게 됩니다.
그런데 문제는 Complex operator+(const Complex& a, const Complex& b) 가 제대로 작동하기 위해서는 
이 함수가 a 와 b 의 real 과 img 에 접근해야 하는데, 해당 멤버 변수들은 모두 private 입니다.
따라서 이를 해결하기 위해서는 이 함수는 Complex 의 friend 로 지정하면 됩니다.

class Complex {
 private:
  double real, img;
  double get_number(const char* str, int from, int to) const;

 public:
  Complex(double real, double img) : real(real), img(img) {}
  Complex(const Complex& c) { real = c.real, img = c.img; }
  Complex(const char* str);

  Complex& operator+=(const Complex& c);
  Complex& operator=(const Complex& c);

  // 나머지 연산자 함수들은 생략 :)
  friend Complex operator+(const Complex& a, const Complex& b);
};

Complex operator+(const Complex& a, const Complex& b) {
  Complex temp(a.real + b.real, a.img + b.img);
  return temp;
}

--------------------------------
std::cout << a;
라고 하는 것은 사실 std::cout.operator<<(a) 를 하는 것과 동일한 명령이었습니다. 
즉, 어떤 std::cout 이라는 객체에 멤버 함수 operator<< 가 정의되어 있어서 a 를 호출하게 되는 것이지요.

std::ostream& operator<<(std::ostream& os, const Complex& c) {
  os << "( " << c.real << " , " << c.img << " ) ";
  return os;
}
참고로 opreator<< 에서 ostream& 타입을 리턴하는 이유는 다음과 같은 문장을 처리할 수 있기 위해서입니다.
std::cout << "a 의 값은 : " << a << " 이다. " << std::endl;
하지만 위 operator<< 의 경우 한 가지 문제가 있는데 
바로 이 operator<< 에서 c.real 과 c.img 에 접근할 수 없다는 점입니다. 
왜냐하면 real 과 img 모두 Complex 클래스의 private 멤버 변수들이기 때문이죠.

따라서 이를 해결하기 위해 세 가지 방법을 고려할 수 있습니다.
1.그냥 real 과 img 를 public 으로 바꾼다.
2.Complex 에 print(std::ostream& os) 와 같은 멤버 함수를 추가한 뒤, 이를 operator<< 에서 호출한다.
3.위 operator<< 를 friend 로 지정한다.

흠 첫 번째 방법은 그닥 권장되지 않는 방법입니다. 구현 디테일은 최대한 숨기는 것이 좋습니다. 
두 번째 방법은 나름 괜찮은 방법이기는 합니다. 
하지만 friend 를 활용해보자는 입장에서 세 번째 방법을 사용해보도록 하겠습니다.

#include <iostream>
#include <cstring>

class Complex {
 private:
  double real, img;
  double get_number(const char* str, int from, int to) const;

 public:
  Complex(double real, double img) : real(real), img(img) {}
  Complex(const Complex& c) { real = c.real, img = c.img; }
  Complex(const char* str);

  Complex& operator+=(const Complex& c);
  Complex& operator=(const Complex& c);

  // 나머지 연산자 함수들은 생략 :)
  friend std::ostream& operator<<(std::ostream& os, const Complex& c);
};

std::ostream& operator<<(std::ostream& os, const Complex& c) {
  os << "( " << c.real << " , " << c.img << " ) ";
  return os;
}

-------------------------------------------------
//첨자연산자 operator[]
여기서 그렇다면 MyString 클래스의 operator[] 를 추가해보도록 합시다. 
operator[] 함수는 자명하게도 인자로 몇 번째 문자인지, int 형 변수를 인덱스로 받게 됩니다. 
따라서 operator[] 는 다음과 같은 원형을 가집니다.
char& operator[](const int index);
index 로 [] 안에 들어가는 값을 받게 됩니다. 
그리고 char& 를 인자로 리턴하는 이유는
MyString str("abcdef");
str[3] = 'c';
str.println(); //abccef
와 같은 명령을 수행하기 때문에, 그 원소의 레퍼런스를 리턴하게 되는 것이지요. 
실제로 opreator[] 의 구현은 아래와 같이 매우 단순합니다.

//멤버변수에 접근하기위해 멤버함수로 구현
char& MyString::operator[](const int index) { return string_content[index]; }
위와 같이 index 번째의 string_content 를 리턴해서, operator[] 를 사용하는 사용자가, 이의 레퍼런스를 가질 수 있게 되지요. 

-------------------------
타입변환연산자 operator int()
C++ 에서 프로그래밍을 할 때 어떤 경우에 기본 자료형들을 객체로써 다루어야 할 때가 있습니다. 

class Int
{
  int data;
  // some other data

 public:
  Int(int data) : data(data) {}
  Int(const Int& i) : data(i.data) {}
};

Int x = 3;      // Wrapper 객체
int a = x + 4;  // 그냥 평범한 int 형 변수 a
이를 잘 수행하기 위해서라면, 여태까지 연산자 오버로딩을 열심히 배워오신 여러분 생각이라면
그렇다면 int 변수에 사용되는 모든 연산자 함수들을 만들어주면 되겠군!
이라고 생각이 들 것입니다. 정말..?

타입 변환 연산자는 다음과 같이 정의합니다.
operator (변환 하고자 하는 타입) ()
예를 들어 우리의 int Wrapper 클래스의 경우 다음과 같은 타입 변환 연산자를 정의할 수 있지요.
operator int()
한 가지 주의할 점은, 생성자 처럼 함수의 리턴 타입을 써주시면 안됩니다. 
이는 C++ 에서 변환 연산자를 정의하기 위한 언어 상의 규칙이라고도 볼 수 있습니다. 
그렇게 된다면, 우리의 int 변환 연산자는 다음과 같이 간단하게 구성할 수 있겠지요.

operator int() { return data; }
그냥 단순히 data 를 리턴해주면 됩니다. 
그렇게 된다면 우리의 Wrapper 클래스의 객체를 '읽는' 데에는 아무런 문제가 없게 됩니다. 
왜냐하면 컴파일러 입장에서 적절한 변환 연산자로 operator int 를 찾아서 결국 int 로 변환해서 처리하기 때문이지요. 
다만 문제는 '대입' 시에 발생하는데, 
다행이도 디폴트 대입 연산자가 이 역시 알아서 잘 처리할 것이기 때문에 걱정 안하셔도 됩니다.

#include <iostream>
class Int {
  int data;
  // some other data

 public:
  Int(int data) : data(data) {}
  Int(const Int& i) : data(i.data) {}

  operator int() { return data; }
};

int main() {
  Int x = 3;
  int a = x + 4; <- x+4에서 x가 int형변환 

  x = a * 2 + x + 4;
  std::cout << x << std::endl;
}

----------------------------
//전위/후위 증감 연산자

a++; //후위
++a; //전위
위 두 ++ 연산자들을 구분해서 오버로딩을 시켜주냐 이말이죠. 두 연산자 모두 operator++ 이기 때문입니다.
C++ 언어에서는 다음과 같은 재미있는 방법으로 구분합니다. 일단 C++ 언어에서는 다음과 같은 재미있는 방법으로 구분합니다. 
일단;

operator++();
operator--();
은 전위 증감 연산자 (++x, --x) 를 오버로딩 하게 됩니다. 그렇다면 후위 증감 연산자 (x++, x--) 는 어떨까요. 바로
operator++(int x);
operator--(int x);
로 구현하게 됩니다. 물론 인자 x 는 아무런 의미가 없습니다. 
단순히 컴파일러 상에서 전위와 후위를 구별하기 위해 int 인자를 넣어주는 것이지요.
한 가지 중요한 점은, 전위 증감 연산의 경우 값이 바뀐 자기 자신 을 리턴해야 하고, 후위 증감의 경우 값이 바뀌기 이전의 객체 를 리턴해야 된다는 점입니다.
따라서 이를 감안한다면 아래와 같은 꼴이 됩니다.

A& operator++() {
  // A ++ 을 수행한다.
  return *this;
}
전위 연산자는 간단히 ++ 에 해당하는 연산을 수행한 후에 자기 자신을 반환해야 합니다. 반면에 후위 연산자의 경우

A operator++(int) {
  A temp(A);
  // A++ 을 수행한다.
  return temp;
}
++ 을 하기 전에 객체를 반환해야 하므로, temp 객체를 만들어서 이전 상태를 기록한 후에, 
++ 을 수행한 뒤에 temp 객체를 반환하게 됩니다.
따라서 후위 증감 연산의 경우 추가적으로 복사 생성자를 호출하기 때문에 전위 증감 연산보다 더 느립니다!
