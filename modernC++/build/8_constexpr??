//constexpr[콘스트익스프레션]:실행시간에 계산할 연산들을 컴파일시간으로 당김
//최적화 코드가됨  하지만 그 계산에 들어가는 입력값을
//컴파일시간에 미리 알고 있어야 함으로 제한적이다.
#include <iostream>
int cal(int a,int b, int c){
    return a+b+c;
}

int main(){
    int a=3;
    int b=4;
    int c=5;
    std::cout<<cal(a,b,c)<<std::endl;
}

//constexpr 적용
#include <iostream>
constexpr int cal(int a,int b, int c){
    return a+b+c;
}

int main(){
    constexpr int a=3;
    constexpr int b=4;
    constexpr int c=5;
    std::cout<<cal(a,b,c)<<std::endl;
}

//적용2
#include <array>
#include <numeric>
int main(){
    constexpr std::array<int,5> n{1,3,5,7,9};
    int d = std::accumulate(n.begin(),n.end(),0);
    //accumulate가 constexpr 을 c++20부터 지원하므로
    //g++ main.cpp -std=c++20
}

//적용3
class Square{
    public:
        constexpr Square(int l):ml{l}{};
        constexpr int area() const{
            return ml*ml;
        }
        constexpr int perimeter() const{
            return 4*ml;
        }
    private:
        int ml;
};

int main(){
    constexpr Square c{10};
    int a = c.area();
    int b = c.perimeter();
}
