#include <iostream>
#include <string>

int main(){
    int a =65;
    std::cout<<(char)a<<std::endl; //아스키코드에 대응되는 A출력

    char a[6]={'n','o','c','o','p','e'}; //in stack nocope\0
    std::cout<<a<<std::endl; //nocope 출력

    char a[6]={'n','o','\0','o','p','e'};//in stack no\0ope\0
    std::cout<<a<<std::endl; //no 출력
    std::cout<<sizeof(a)<<std::endl; //6
    std::cout<<strlen(a)<<std::endl; //2 -> \0까지만 길이를잰다

    char a[] = "nocope"  
    a[1]='h';//가능,왜냐면 stack영역에 있기때문
    std::cout<<a<<std::endl; //nocope 출력
    std::cout<<sizeof(a)<<std::endl; //7 -> \n을 포함한다.
    std::cout<<strlen(a)<<std::endl; //6

    const char *b = "nocope"; //in read only
    //b는 스택, nocope\0는 read only영역이기 때문에 const로 하자
    //b[1]='h' //불가능, read only라서
    std::cout<<b<<std::endl; //nocope 출력
    std::cout<<sizeof(b)<<std::endl; //8 변수b가 포인터로서의 사이즈임
    std::cout<<strlen(b)<<std::endl; //6 \0까지 출력


    //마지막으로 string은 클래스이기 때문에 다룰수 있는 멤버함수가 많이 제공되고
    //또 메모리가 힙에 할당되기 때문에 프로세스 실행 중 동적으로 사이즈 줄이고 늘이고하는것이 가능하다
    std::string c = "nocope";
    //스택에 c, 힙에 "nocope"
    std::cout<<c<<std::endl; //nocope 출력
    std::cout<<sizeof(c)<<std::endl; //32 -> string object의 크기.
    std::cout<<c.size()<<std::endl; //6

    //또 string은 \0로 끊어지지 않기 때문에 문자열에 \0문자 넣는것도 가능하다.
    std::string c("no\0cope",7);
    std::cout<<c<<std::endl; //nocope 출력
    std::cout<<sizeof(c)<<std::endl; //32 -> string object의 크기.
    std::cout<<c.size()<<std::endl; //7

    //String은 길이가 자유롭게변하는 문자열 타입입니다. 때문에 data자체는 heap에 올라가야합니다. 
    //다만컴파일러의 string optimizer가 짧은길이의 문자열에대해서는 stack에 올리는 경우는 있습니디.
}
